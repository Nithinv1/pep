PEP: 9999
Title: Support for indexing with keyword arguments
Version: $Revision$
Last-Modified: $Date$
Author: Stefano Borini, Jonathan Fine
Sponsor: 
Discussions-To: python-ideas@python.org
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 24-Aug-2020
Python-Version: 3.10
Post-History: 
Resolution: 

Abstract
========

This PEP proposed extending python to allow keyword-like arguments to be
accepted during indexing operations. Notations in the form ``a[K=3, R=2]``
would become legal syntax.  A final strategy will be proposed in terms of
semantics and implementation.

This PEP is a rework and expansion of PEP-0472, where an extension of the
indexing operation to support keyword arguments was analysed.Â PEP-0472 was
Rejected due to apparent lack of interest back in 2019. However, renewed
interest has prompted a re-analysis and therefore this PEP.

Background
==========

PEP-0472 was opened in 2014. The PEP focused on various use cases and was extracted
from a broad discussion on implementation strategies. The PEP was eventually rejected
in 2019 [#rejection]_ mostly due to lack of interest despite its 5 years of existence.

However, with the introduction of type hints in PEP-0484 [#pep-0484]_ the
square bracket notation has been used consistently to enrich the typing
annotations, e.g. to specify a list of integers as Sequence[int]. As a result,
a renewed interest in a more flexible syntax that would allow for named
information has been expressed in many different threads.

During the investigation of PEP-0472, many different strategies have been
proposed to expand the language, but no real consensus was reached. Many corner
cases have been examined more closely and felt awkward, backward incompatible
or both. Renewed interest was prompted by Caleb Donovick [#request-1]_ in 2019 
and Andras Tantos [#request-2]_ in 2020. These requests prompted a strong activity
on the python-ideas mailing list, where various options have been discussed and
a general consensus has been reached.

Motivation and Use cases
========================

The current python syntax focuses exclusively on position to express the
index, nd also contains syntactic sugar to refer to
non-punctiform selection (slices)

::

    >>> a[3]       # returns the fourth element of a
    >>> a[1:10:2]  # slice notation (extract a non-trivial data subset)
    >>> a[3,2]     # multiple indexes (for multidimensional arrays)

The additional notation proposed in this PEP would allow notations involving
keyword arguments in the indexing operation, e.g.

::

    >>> a[K=3, R=2]

which would allow a more flexible way to indicise content.

One must additionally consider the extended form that allows both positional
and keyword specification

::

    >>> a[3, R=3, K=4]

Use cases
---------

The following practical use cases present two broad categories of usage of a
keyworded specification: Indexing and contextual option. For indexing:

1. To provide a more communicative meaning to the index, preventing e.g. accidental
   inversion of indexes

   ::

     >>> gridValues[x=3, y=5, z=8]
     >>> rain[time=0:12, location=location]

2. To enrich the typing notation with keywords, especially during the use of generics

   :: 

     def function(value: MyType[T=int]):


3. In some domain, such as computational physics and chemistry, the use of a
   notation such as ``Basis[Z=5]`` is a Domain Specific Language notation to represent
   a level of accuracy

   ::

     >>> low_accuracy_energy = computeEnergy(molecule, BasisSet[Z=3])

4. Pandas currently uses a notation such as

   ::
    
     >>> db[db['x'] == 1]

   which could be replaced with db[x=1].

5. xarray has named dimensions. Currently these are handled with functions .isel:

   :: 
   
     >>> data.isel(row=10)  # Returns the tenth row

   which could also be replaced with data[row=10]. A more complex example:

   ::

     >>> da.isel(space=0, time=slice(None, 2))[...] = spam
     >>> da[space=0, time=:2] = spam


It is important to note that How the notation is interpreted is up to the
implementation. This PEP only defines and dictates the behavior of python
regarding passed keyword arguments. Not how these arguments should be
interpreted and used by the implementing class.

Current status
==============

Before attacking the problem of adding keyword arguments to the indexing
notation, it is relevant to analyse how the indexing notation works today,
in which contexts, and how it is different from a function call.

The first critical difference of the indexing notation compared to a function 
is that indexing can be used for both getting and setting operations:
in python, a function cannot be on the left hand side of an assignment. In other words,
both of these are valid

    x = a[1, 2]
    a[1, 2] = 5

but only the first one of these is valid

    x = f(1, 2)
    f(1, 2) = 5 # invalid

This asymmetry is important to understand that there is a natural imbalance
between the two forms, and therefore it is not a given that the two should
behave transparently and symmetrically.
    
The second critical difference is that functions have names assigned to their
arguments, unless the passed parameters are captured with *args, in which case
they end up as entries in the args tuple. In other words, functions already
have anonymous argument semantic, exactly like the indexing operation, and
already collect the passed arguments in a tuple, although with a different
syntax: __getitem__ and __setitem__ always receive a tuple.

The third critical difference is that the indexing operation knows how to convert
colon notations to slices, thanks to support from the parser. This is valid

    a[1:3]

this one isn't
    
    f(1:3)

Compatibility Hard points
-------------------------

After discussion, it was found out that the new syntax will have a fixed set of hard points, no matter
the final implementation:

* Invoking indexing _must_ accept some object. E.g. `a[]` is still syntax error.
* It must be possible to mix single values and named indexes, e.g. `a[1, 2, foo=3]`
* No walrus allowed. E.g. `a[foo:=3] is disallowed.


References
==========

.. [#rejection] "Rejection of PEP-0472"
       (https://mail.python.org/pipermail/python-dev/2019-March/156693.html)
.. [#pep-0484] "PEP-0484 -- Type hints" 
       (https://www.python.org/dev/peps/pep-0484)
.. [#request-1] "Allow kwargs in __{get|set|del}item__"
       (https://mail.python.org/archives/list/python-ideas@python.org/thread/EUGDRTRFIY36K4RM3QRR52CKCI7MIR2M/)
.. [#request-2] "PEP 472 -- Support for indexing with keyword arguments"
       (https://mail.python.org/archives/list/python-ideas@python.org/thread/6OGAFDWCXT5QVV23OZWKBY4TXGZBVYZS/)


Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:
