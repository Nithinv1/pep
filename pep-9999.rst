PEP: 9999
Title: Python 2.X Legacy
Author: Rolf Stenholm
Status: Draft
Type: Process
Content-Type: text/x-rst
Created: 2018-12-16

Abstract
========

There is a lot of legacy Python 2.X code that needs to be mainteained and keep running until the code is replaced by Python version 3.X.
Some of the Python 2.X code cannot be easily upgrades and may be stuck for decades in some Python 2.X version 
because of legacy system issues, legal issues etc. These systemes must be kept running after Python track 2.X is retired and no 
longer supported. This will now be done ad-hoc for systems that cannot be upgraded to the 3 track of Python. 
This PEP suggest opening up an official legacy version of the 2 track to allow easier operation of old Python 2.X legacy systems.

Motivation
==========

The current 2.X Python track has been built with active mainteneance in mind. Now that Python track 2.X is no longer maintaned 
any obsolete and removed C libraries requires patching in the Python libraries. The C libraries are likely to never be recompiled,
patched or fixed or this version but may still be used by legacy Python systems. Because of this Python 2.X systems will require 
a number of workarounds to keep working for the nextdecadess. Because some systems have very long lifetime code may have to be kept 
maintained for the next 50 years. An example of old running systems are assembler banking systems from the 70s that are still being used.
To pool all workarounds to keep old legacy Python 2.X systems running it would be logical to create a legacy 2.X version 
to keep old Python 2.X systems running.  

Specification
=============

The primary part of the process is simply to copy the latest 2.X code and maintain a repository of ad-hoc changes used to 
keep 2.X systems running. The exact look and feel of this legacy version is therefore outside of this PEP however it can be assumed
that the new version may several changes to the latest 2.X Python track. A possibility to ignore or replace legacy C-libraries. 
Methods to easily run libraries with any 2.X binaries. Code emulator support of different types for running no longer support libraries.
Possible improved decompiler support and more support for patching changing library internals.
The Python 2.X legacy version should aim to have the ability to run most legacy Python 2.X system for the next 50 years.
There will be no language improvements other than for keeping legacy systems runnig in this version of Python.
An example of a library requiring improvments to keep running is the hashlib from Python 2.7 that breaks if the shipped C-libraries are
not available. For keeping 2.X systems running for the next decades the hashlib needs to be improved to allow for replacing and linking
old legacy C-libraries.

Security Implications
=====================

The above process should significantly improve security going forward for old Python 2.X legacy systems that are kept 
running on Python 2.X versions. The process avoids ad-hoc and flawed patches to old system and iwll allow testing of 
old Python 2.X software on new machines that are missing Python 2.X versions.


Open Issues
===========

Not discussed in this PEP is how ad-hoc patches are accepted in this 2.X legacy version.  It is assumed to be fixed mostly through 
technical methods as the number of people involved in this legacy version is 
very likely small.


