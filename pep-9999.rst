PEP: 9999
Title: Variance operators for generic type variables: +T and -T 
Author: Joren Hammudoglu <jhammudoglu at gmail.com>
Status: Active
Type: Standards Track
Content-Type: text/x-rst
Created: 24-Jul-2021
Post-History: 24-Jul-2021


Abstract
========

PEP 484 proposes a syntax for defining the `covariance and contravariance 
<https://www.python.org/dev/peps/pep-0484/#covariance-and-contravariance>`_
of `user-defined generic types
<https://www.python.org/dev/peps/pep-0484/#user-defined-generic-types>`_::

    T_co = typing.TypeVar('T_co', covariant=True)
    T_contra = typing.TypeVar('T_contra', contravariant=True)


    # a covariant generic type
    class EventDispatcher(typing.Generic[T_co]):
        def dispatch() -> T_co: ...

    # a contravariant generic type
    class EventListener(typing.Generic[T_contra]):
        def receive(event: T_contra) -> None: ...


This PEP proposes a concise syntax for specifying the variance of
generic types by overloading the ``+`` and ``-`` prefix operators
on type variables::

    T = typing.TypeVar('T')


    # a covariant generic type
    class EventDispatcher(typing.Generic[+T]):
        def dispatch() -> T: ...

    # a contravariant generic type
    class EventListener(typing.Generic[-T]):
        def receive(event: T) -> None: ...



Rationale
=========

Although defining the variance of generic type by using type variables
that are constructed with the ``covariant=True`` or ``contravariant=True``
keyword arguments, it has downsides. 

This is why type checkers do no allow using co- or contravariant type
variables outside of generic classes. 


 - In PEP 484 it states:

    Covariance or contravariance is not a property of a type variable,
    but a property of a generic class defined using this variable. 

   Instead of defining variance on the type variable itself, it would
   make more sense to mark the type variable as variant when defining
   the generic type, and only there. 

 - Because variance is a property of the generic type itself, type 
   checkers do no allow using co- or contravariant type variables 
   outside of generic classes. But as the variance is currently a
   property of the type variables, the must be used within variant
   generic classes.

 - Creating separate type variables for different variances often
   results in up to 3x code duplication, especially for type variables
   with constraints or an upper bound. 

 - Although the terms "covariant" "contravariant" are descriptive, they
   are verbose, and challenging concepts for people new to typed
   languages. 


Proposal
========


All of these issues can be solved by overloading the ``+`` and ``-``
prefix operators of ``typing.TypeVar`` instances, so that ``+T`` is an
alias for a covariant type variable, and ``-T`` for a contravariant 
one. These variance operators should only be used within the parameter
list of `typing.Generic` and `typing.Protocol` when subclassing them.

This syntax is practically identical to type parameter variance in the
Scala programming language [2]_.


Specification
=============




How to Teach This
=================


Suggested Sections
==================


Rejected Ideas
==============


References
==========

.. [1] mypy
   http://mypy-lang.org/
.. [2] Scala Variance
   https://docs.scala-lang.org/scala3/book/types-variance.html


Copyright
=========

This document is placed in the public domain or under the CC0-1.0-Universal license, whichever is more permissive.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:



Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.


Various sections are found to be common across PEPs and are outlined in
PEP 1 [1]_. Those sections are provided here for convenience.
