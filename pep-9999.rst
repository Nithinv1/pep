PEP: <9999>
  Title: <Treat newly referenced variables as Global by Default>
  Author: <Muhamed Itani>
* Sponsor: <real name of sponsor>
* PEP-Delegate: <PEP delegate's real name>
* Discussions-To: <moefear85@gmail.com>
  Status: <Draft | Active | Accepted | Provisional | Deferred | Rejected |
           Withdrawn | Final | Superseded>
  Type: <Standards Track | Informational | Process>
* Content-Type: <text/x-rst | text/plain>
* Requires: <pep numbers>
  Created: <28-Aug-2021>
* Python-Version: <version number>
  Post-History: <dates of postings to python-ideas and/or python-dev>
* Replaces: <pep number>
* Superseded-By: <pep number>
* Resolution: <url>


I often create variables globally when I need to reference them across multiple functions. Creating a class for this is often unnecessarily cumbersome, which is apythonic. This holds especially true, since there is no real difference in what globals are to a module relative to what member variables are to a class. But the point is still valid for classes. Instead of having to reference the class to access its variables from within its functions, assume member variables are meant by default, as this is the most common scenario.

When someone wants instead to implicitly create a new local variable (be it in a module-level function or in a class function), then use an extra "local" keyword for that. Most people, when they intend a new local variable, would rather use a new/different name alltogether, or the same name but with some prefix or suffix anyways. So cases where using the "local" keyword would then be rare. In the current state however, the opposite doesn't hold true. The cases where one would have to type "global" are way too common, simply because the cases where one would intend the global variable when using its name, is far more common than the cases of indending a new separate variable when using said name.
