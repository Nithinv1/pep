PEP: 621
Title: Precise line numbers.
Author: Mark Shannon <mark@hotpy.org>
Status: Active
Type: Process
Content-Type: text/x-rst
Created: 22-Jun-2020
Post-History: XXXX


Abstract
========

Python should guarantee that "line" tracing events are generated for all lines of code executed and only for lines of
code that are executed. The ``f_lineo`` attribute of frame objects should always give the correct line number, meaning either the
line number of the source code currently being executed, or the line number of the last line of source that was executed.

A side effect of ensuring correct line numbers, is that some bytecodes will need to be marked as artificial, and not have a meaningful line number.
To assist tools, a new ``co_lines`` attribute will be added that describes the mapping from bytecode to source.

Motivation
==========

Users of ``sys.settrace`` and associated tools should be able to expect that the line number in ``f_lineno`` is correct.
Having this guarantee is also beneficial to implementers as well, as the current behaviour is not obvious and has some odd corner cases.

Rationale
=========

Specifiying the behaviour of line events and ``f_lineno`` precisely is useful,
it means that the assumption that all bytecode offsets map back to source code is not true.
It hasn't been true for a while, but we have attempted to hide it.
The ``co_lnotab`` table of code objects is built around this assumption,
and code handling tracing has to workaround this.

Rather than attempt to fix the ``co_lnotab`` object, a new method
``co_lines()`` will be added, which returns an iterator over bytecode offsets and source code lines.

Ensuring that the bytecode is annotated correctly to enable accurate line number information means that
some bytecodes must be marked as artificial, and not having a line number.

Tools might not expect this, so some care must be taken not to break them. 
Consequently, when artificial bytecodes cannot be given a meaningful line number, they are assigned a line number of -1.

Specification
=============

Line events and the ``f_lineno`` attribute should act as an experienced Python user would expect in *all* cases.

* In order to guaranteed the above two properties, some bytecodes will not have a meaningful line number, and be assigned a line number of -1.
  No "line" events will be generated for line -1.

Tracing
'''''''

Tracing generates events for calls, returns, exceptions, instructions executed under some circumstances and lines of source code executed.

Only line events are covered by this PEP. 

When tracing is turned on, live events will be generated when:

* A new line of source code is reached.
* A backwards jump occurs, even if it jumps to the same line, as may happen in list comprehensions.

Additionally, line events will *never* be generated for source code lines that are not executed.

The f_lineno attribute
''''''''''''''''''''''

* When a frame object is created, the ``f_lineno`` will be set to the line
  at which the function, or class is defined. For modules it will be set to zero.
* Whenever a line event would be generated, even if it is not, ``f_lineno`` will be updated to match the line number about to be executed.

The new co_lines() method of code objects
'''''''''''''''''''''''''''''''''''''''''

The ``co_lines()`` method will return an iterator which yields triples containing:

* ``start`` -- The offset (inclusive) of the start of the bytecode range
* ``end`` -- The offset (exclusive) of the end of the bytecode range
* ``line`` -- The line number

The sequence generated will have the following properties:

* For any triple, ``end`` > ``start``.
* The ``(start, end)`` ranges will be strictly increasing.
  That is, for any pair of tuples the ``start`` of the second
  will be greater than or equal to the ``end`` of the first.

Note that there may be gaps in the sequence generated. That is, the ``end`` of one range may be less than the ``start`` of the next.
The line numbers may increase, decrease or remain the same from one triple to the next.

The co_lnotab code object attribute
'''''''''''''''''''''''''''''''''''

The ``co_lnotab`` attribute holds a table which describes the mapping from bytecode offset to line number.
To ensure the above properties of line events and the ``f_lineno`` attribute,
it will necessary to make some bytecode instructions as not corresponding to any line in the source code.
These bytecodes will be given a pseudo line number of -1.

Tools that parse the ``co_lnotab`` table should be aware that negative line numbers might be present,
and should use the new ``co_lines()`` method instead.

The ``co_lines()`` method will be added in 3.10. The ``co_lnotab`` attribute will be deprecated in 3.10 and removed in 3.12.


Backwards Compatibility
=======================

Any tools that parse the ``co_lnotab`` attribute of code objects, need to be aware that some line numbers will be negative, and
move to using ``co_lines()`` before 3.12 is released.
Tools that use ``sys.settrace`` will be unaffected, except in cases where sequence of "line" events they receive is more precise.


Examples of code for which the sequence of trace events which will change
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

In the following examples, events are listed as "name", ``f_lineno`` pairs.


``pass`` statement in an ``if`` statement.
------------------------------------------
 
::

  0.  def spam(a):
  1.      if a:
  2.          eggs()
  3.      else:
  4.          pass

If ``a`` is ``True``, then the sequence of events generated by Python 3.9 is::

  "line" 1
  "line" 2
  "line" 4
  "return" 4

From 3.10 the sequence will be::

  "line" 1
  "line" 2
  "return" 2

Multiple ``pass`` statements.
-----------------------------

::

  0.  def bar():
  1.      pass
  2.      pass
  3.      pass

The sequence of events generated by Python 3.9 is::
  
  "line" 3
  "return" 3

From 3.10 the sequence will be::

  "line" 1
  "line" 2
  "line" 3
  "return" 3

C API
'''''

Access to the ``f_lineno`` attribute of frame objects through C API functions is unchanged.
``f_lineno`` can be read by ``PyFrame_GetLineNumber``. ``f_lineno`` can only be set via ``PyObject_SetAttr`` and similar functions.

Accessing ``f_lineno`` directly through the underlying data structure is forbidden.


Performance Implications
========================

There should be no change in performance, except for long chains of ``pass`` statements which will probably become a little slower.


Reference Implementation
========================

https://github.com/python/cpython/compare/master...markshannon:honest-line-numbers


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
    Local Variables:
    mode: indented-text
    indent-tabs-mode: nil
    sentence-end-double-space: t
    fill-column: 70
    coding: utf-8
    End:

