PEP: 9999
Title: Remove wstr from Unicode
Author: Inada Naoki <songofacandy@gmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 24-Jun-2020
Python-Version: 3.10


Abstract
========

PEP 393 deprecated some unicode APIs, and introduced ``wchar_t *wstr``,
and ``Py_ssize_t wstr_length`` in unicode implementation for backward
compatibility of these deprecated APIs. [1]_

This PEP is planning removal of ``wstr``, and ``wstr_length`` with
deprecated APIs using these members.


Motivation
==========

Memory usage
------------

``str`` is one of the most used types in Python.  Even most simple ASCII
strings have a ``wstr`` member.  It consumes 8 bytes on 64bit systems.


Runtime overhead
----------------

To support legacy Unicode object created by
``PyUnicode_FromUnicode(NULL, length)``, many Unicode APIs has
``PyUnicode_READY()`` check.

When we drop support of legacy unicode object, We can reduce this overhead
too.


Simplicity
----------

Support of legacy Unicode object makes Unicode implementation complex.
Until we drop legacy Unicode object, it is very hard to try other Unicode
implementation like UTF-8 based implementation in PyPy.


Plan
=====

Python 3.9
----------

These macros and functions are marked as deprecated, using
``Py_DEPRECATED`` macro.

* Py_UNICODE_WSTR_LENGTH
* PyUnicode_GET_SIZE
* PyUnicode_GET_DATA_SIZE
* PyUnicode_AS_UNICODE
* PyUnicode_AS_DATA
* PyUnicode_AsUnicode
* _PyUnicode_AsUnicode
* PyUnicode_AsUnicodeAndSize
* PyUnicode_FromUnicode


Python 3.10
-----------

Behavior changed:

* ``PyUnicode_FromUnicode(NULL, size)`` and
  ``PyUnicode_FromStringAndSize(NULL, size))`` will raise
  DeprecationWarning when ``size > 0``.

* PyArg_ParseTuple and PyArg_ParseTupleAndKeywords will raise
  DeprecationWarning when 'u', 'u#', 'Z', and 'Z#' format are used.


Python 3.12
-----------

Following members will be removed from Unicode strucutre:

* ``wstr``
* ``wstr_length``
* ``state.compact``
* ``state.ready``

Following macros and functions will be removed:

* Py_UNICODE_WSTR_LENGTH
* PyUnicode_GET_SIZE
* PyUnicode_GET_DATA_SIZE
* PyUnicode_AS_UNICODE
* PyUnicode_AS_DATA
* PyUnicode_AsUnicode
* _PyUnicode_AsUnicode
* PyUnicode_AsUnicodeAndSize
* PyUnicode_FromUnicode

Behavior changed:

* ``PyUnicode_FromStringAndSize(NULL, size))`` will raise
  RuntimeError when ``size > 0``.

* PyArg_ParseTuple and PyArg_ParseTupleAndKeywords will raise
  RuntimeError when 'u', 'u#', 'Z', and 'Z#' formats are used.

Following macros, enum members will be marked deprecated.

* PyUnicode_WCHAR_KIND
* PyUnicode_READY -- returns 0 always
* PyUnicode_IS_READY -- returns 1 always
* PyUnicode_IS_COMPACT -- returns 1 always


Python 3.14
-----------

Following macros, enum members, and functions will be removed.

* PyUnicode_WCHAR_KIND
* PyUnicode_READY
* PyUnicode_IS_READY
* PyUnicode_IS_COMPACT

Behavior changed:

* PyArg_ParseTuple and PyArg_ParseTupleAndKeywords will raise
  SystemError instead of RuntimeError, like regular unsupported
  format.


Alternative Ideas
=================

Advanced Schedule 1
-------------------

Accelerate all changes by 1 version.

If many third packages are broken by this change, we will revert the
change and back to regular schedule.

Pros: There is a chance to remove ``wstr`` in Python 3.11. Even if
we need to revert it, third party maintainers can have more time to
prepare the removal and we can get feedback from the community early.

Cons: Adding warnings in beta period will make some confusion and
risk. Note that 'u', 'u#', 'Z', and 'Z#' are used in CPython yet.


Advanced Schedule 2
-------------------

Accelerate only removing legacy Unicode support.

* ``PyUnicode_FromUnicode(NULL, size)`` and
  ``PyUnicode_FromStringAndSize(NULL, size))`` will raise
  DeprecationWarning when ``size > 0`` since Python 3.9,
  and raise RuntimeError since Python 3.11.

* ``state.compact`` and ``state.ready`` will be removed in Python
  3.11.

This plan is safer than Advanced Schedule 1, because the legacy
Unicode object is not used in CPython core and stdlib.


Use hashtable to store wstr
---------------------------

Store the ``wstr`` in hashtable, instead of Unicode structure.

Pros: We can save memory usage even from Python 3.10. We can have
more longer timeline to remove the ``wstr``.

Cons: This implementation will increase the complexity of Unicode
implementation.


References
==========
A collection of URLs used as references through the PEP.

.. [1] PEP 393 -- Flexible String Representation
       (https://www.python.org/dev/peps/pep-0393/)

.. GH-20878 -- Add Py_DEPRECATED to deprecated unicode APIs
   (https://github.com/python/cpython/pull/20878)

.. GH-20933 -- Raise DeprecationWarning when creating legacy Unicode
   (https://github.com/python/cpython/pull/20933)

.. GH-20927 -- Raise DeprecationWarning for getargs with 'u', 'Z' #20927
   (https://github.com/python/cpython/pull/20927)

.. GH-12409 -- Prepare for removing the legacy Unicode C API.
   (https://github.com/python/cpython/pull/12409)


Copyright
=========

This document has been placed in the public domain.
