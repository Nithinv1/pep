PEP: 9999
Title: Complementary syntax for ``Union[]`` and ``Optional[]``
Author: Philippe PRADOS <github@prados.fr>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 28-Aug-2019
Python-Version: 3.9


Introduction
============

This PEP describes an extension to Python, to add a complementary
syntax to write ``Union[X,Y]`` and ``Optional[X]`` easier.


Motivation
==========

The PEP484 [1]_ and PEP526 [2]_ propose a generic syntax to add typing in variable,
parameter and return. MyPy [3]_ accept a syntax something like this:

::

    annotation: name_type
    name_type: NAME (args)?
    args: '[' paramslist ']'
    paramslist: annotation (',' annotation)* [',']

- To describe a disjunction, the user must use ``Union[X,Y]``.

- To describe an optional value, the user must use ``Optional[X]``.

The verbosity of this syntax does not help the adoption.

Proposal
========

Inspired by Scala [4]_, this proposal adds two operators in the root ``type`` :

- ``__or__()``
- ``__invert__()``.

So, the new syntax for annotations will be :

::

    annotation: ( name_type | or_type | invert_type )
    or_type: name_type '|' annotation
    invert_type: '~' annotation
    name_type: NAME (args)?
    args: '[' paramslist ']'
    paramslist: annotation (',' annotation)* [',']

Examples
========

Here are some examples of what you can do with this feature.

::

    # in place of
    # def a(list: List[Union[int, str]], param: Optional[int]) -> Union[float, str]
    def a(list: List[int | str], param: ~int) -> float | str:
        pass

    a([1,"abc"],None)

    assert(str | int == Union[str,int])
    assert(str | int | float == Union[str, int, float])
    assert(~str == Optional[str])

The MyPy [3]_ will be updated to accept this new syntax.


Dissenting Opinion
==================

- to be discussed

Reference Implementation
========================

A reference implementation for `cpython is here
<https://github.com/pprados/cpython/tree/add_INVERT_to_types>`_.
A reference implementation for `mypy is here
<https://github.com/pprados/mypy/tree/add_INVERT_to_types>`_.


References
==========

.. [1] PEP484,
   https://www.python.org/dev/peps/pep-0484/
.. [2] PEP526,
   https://www.python.org/dev/peps/pep-0526/
.. [3] MyPy
   http://mypy-lang.org/
.. [4] Scala Union Types
   https://dotty.epfl.ch/docs/reference/new-types/union-types.html

Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
