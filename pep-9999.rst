PEP: 9999
Title: Remove wstr from Unicode
Author: Inada Naoki <songofacandy@gmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 24-Jun-2020
Python-Version: 3.10


Abstract
========

PEP 393 deprecated some unicode APIs, and introduced ``wchar_t *wstr``,
and ``Py_ssize_t wstr_length`` in unicode implementation to support
these deprecated APIs. [1]_

This PEP is planning removal of ``wstr``, and ``wstr_length`` with
deprecated APIs using these members by Python 3.12.


Motivation
==========

Memory usage
------------

``str`` is one of the most used types in Python.  Even most simple ASCII
strings have a ``wstr`` member.  It consumes 8 bytes on 64bit systems.


Runtime overhead
----------------

To support legacy Unicode object created by
``PyUnicode_FromUnicode(NULL, length)``, many Unicode APIs has
``PyUnicode_READY()`` check.

When we drop support of legacy unicode object, We can reduce this overhead
too.


Simplicity
----------

Support of legacy Unicode object makes Unicode implementation complex.
Until we drop legacy Unicode object, it is very hard to try other Unicode
implementation like UTF-8 based implementation in PyPy.


Plan
=====

Python 3.9
----------

These macros and functions are marked as deprecated, using
``Py_DEPRECATED`` macro.

* Py_UNICODE_WSTR_LENGTH
* PyUnicode_GET_SIZE
* PyUnicode_GET_DATA_SIZE
* PyUnicode_AS_UNICODE
* PyUnicode_AS_DATA
* PyUnicode_AsUnicode
* _PyUnicode_AsUnicode
* PyUnicode_AsUnicodeAndSize
* PyUnicode_FromUnicode


Python 3.10
-----------

* Following macros, enum members will be marked as deprecated.

   * PyUnicode_WCHAR_KIND
   * PyUnicode_READY
   * PyUnicode_IS_READY
   * PyUnicode_IS_COMPACT

* ``PyUnicode_FromUnicode(NULL, size)`` and
  ``PyUnicode_FromStringAndSize(NULL, size)`` will emit
  DeprecationWarning when ``size > 0``.

* PyArg_ParseTuple and PyArg_ParseTupleAndKeywords will emit
  DeprecationWarning when 'u', 'u#', 'Z', and 'Z#' format are used.


Python 3.12
-----------

* Following members will be removed from the Unicode strucutres:

   * ``wstr``
   * ``wstr_length``
   * ``state.compact``
   * ``state.ready``

* The ``PyUnicodeObject`` struct will be removed.

* Following macros and functions, and enum members will be removed:

   * Py_UNICODE_WSTR_LENGTH
   * PyUnicode_GET_SIZE
   * PyUnicode_GET_DATA_SIZE
   * PyUnicode_AS_UNICODE
   * PyUnicode_AS_DATA
   * PyUnicode_AsUnicode
   * _PyUnicode_AsUnicode
   * PyUnicode_AsUnicodeAndSize
   * PyUnicode_FromUnicode
   * PyUnicode_WCHAR_KIND
   * PyUnicode_READY
   * PyUnicode_IS_READY
   * PyUnicode_IS_COMPACT

* ``PyUnicode_FromStringAndSize(NULL, size))`` will raise
  RuntimeError when ``size > 0``.

* PyArg_ParseTuple and PyArg_ParseTupleAndKeywords will raise
  SystemError when 'u', 'u#', 'Z', and 'Z#' formats are used,
  as other unsupported format character.


References
==========
A collection of URLs used as references through the PEP.

.. [1] PEP 393 -- Flexible String Representation
       (https://www.python.org/dev/peps/pep-0393/)


Copyright
=========

This document has been placed in the public domain.
