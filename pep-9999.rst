PEP: 9999
Title: Persistent cache for packaging frontends
Author: Bernát Gábor <gaborjbernat@gmail.com>
Sponsor: TBD
Discussions-To: https://discuss.python.org/t/proposal-adding-a-persistent-cache-directory-to-pep-517-hooks/2303/57
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 02-Jun-2021
Post-History: 


Abstract
========

This document describes extensions to the build backend and frontend communication (as introduced by `PEP-517`_) to allow frontends to manage build backend
data in a persistent way.

Motivation
==========

When building a package, build backends might want to save some data onto the disk to make the build process more robust or improve build performance on subsequent runs. `PEP-517`_ currently offers no dedicated location, which in practice translates for build backends to use the project root as such. This method causes these cache files and folders to show up in the project root if the users trigger a package build, polluting the project root. The build frontend should be able to request moving these files to a different location.

Rationale
=========

When the frontend can request and provide an alternative location on disk for these cache files, the project root would not pollute after a package build. As a consequence, the source directory would be less cluttered, and thus easier to understand and to navigate for new users. Furthermore, it will also eliminate some bugs where the build backend generated files confuse the user tools (e.g., the ``build`` folder for the ``setuptools`` backend makes IDEs think the project source directory contains duplicated code).

Terminology and goals
=====================

The build frontend should be able to provide a cache directory to the build backend. The build backend should respect it if the frontend specifies it and generate intermediate files into this folder. The build frontend should persist in this folder in between subsequent backend calls.

The Mechanism
=============

This PEP adds an optional argument ``cache_directory`` to all hooks defined in ``PEP-517``. By default, this is set to ``None``, in which case the build backend is free to keep the current status quo and use the same cache logic and locations it does today.

Build backend requirements
--------------------------
The backend should use the ``cache_directory`` to save intermediate data.

Build frontend requirements
---------------------------
The build frontend must persist the content within the cache directory, such as subsequent calls can recall data saved in prior calls. The build frontend must not share this folder across different projects. The folder must be empty during the first backend call.

References
==========

.. _`PEP-517`: https://www.python.org/dev/peps/pep-0517/

Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
