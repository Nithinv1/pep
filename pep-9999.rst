PEP: 9999 
Title: Distributing and Packaging Type Information
Author: 
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 09-Sep-2017
Python-Version: 3.7
Post-History: 


Abstract
========

PEP 484 introduced type hints to Python, with goals of making typing
gradual and easy to adopt. This PEP provides a standardized means to
package and distribute type information and how type checkers should 
collect this information for type checking using existing packaging
architecture.

With a complete distribution solution there are many complexities to
consider such as package version, Python version, source of the type
information. For example, third parties may wish to ship their own stubs
if the package maintainer does not wish to do so. Furthermore, the type
checker may not be running on the same version of Python as the version
of Python it is checking.

There are several motivations and methods of supporting typing in a package.                                                 This PEP recognizes four (4) types of packages that may be created:                                                                                                                                                                                       1. The package maintainer would like to add type information inline.                                                                                                                                                                                      2. The package maintainer would like to add type information via stubs.                                                                                                                                                                                   3. The package maintainer would like to add type information via a mix of 1 & 2.                                                                                                                                                                          4. A third party would like to share stub files for a package, but the maintainer                                               does not want to include them in the source of the package.

This PEP aims to support these scenarios and make them simple to add to
packaging and deploy.

### TODO: Summarize below


Rationale
=========

PEP 484 introduced type hints to Python, with goals of making typing
gradual and easy to adopt. PEP 484 introduces a suggestion [1]_ of using
``shared/typehints/pythonX.Y/`` for shipping stub files. However type
annotations can also live within user code. Manually adding a path to
stub files for each third party library does not scale. Additionally,
adding the path to ``site-packages`` will cause type checkers to fail
on packages that are highly dynamic (e.g. sqlalchemy and Django).

Furthermore, package authors are wishing to distribute code that has
inline type information, and there currently is no standard method to
distribute packages with inline type annotations or syntax that can
simultaneously be used at runtime and in type checking.

Specification
=============

The two major parts of this specification are the packaging specifications
and the resolution order for resolving module type information.

Packaging Type Information
--------------------------

Packages must opt into supporting typing. [HOW?] Options include a new
trove classifier, a data file, a special keyword, a pattern for package
name or a requirement on the typing package. Ideally this would be universal
accross all types of packages.





References
==========

.. [1] PEP 484, Storing and Distributing Stub Files
   (https://www.python.org/dev/peps/pep-0484/#storing-and-distributing-stub-files)



Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
