PEP: 9999
Title: Type Parameter Syntax
Version: $Revision$
Last-Modified: $Date$
Author: Eric Traut <erictr at microsoft.com>
Sponsor: Guido van Rossum <guido@python.org>
Discussions-To: typing-sig@python.org
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 15-Jun-2022
Python-Version: 3.12


Abstract
========

This PEP specifies an improved syntax for specifying type parameters within
a generic class, function or type alias.


Motivation
==========

:pep:`484` introduced type variables into the language. :pep:`612` built
upon this concept by introducing parameter specifications, and
:pep:`646` added variadic type variables.

Points of Confusion
-------------------

While the use of type variables has become widespread, the manner in which
they are specified within code is the source of significant confusion among
Python developers. There are a couple of factors that contribute to this
confusion.

The scoping rules for type variables are difficult to understand. Type
variables are typically allocated within the global scope, but their semantic
meaning is valid only when used within the context of a generic class,
function or or type alias. A single runtime instance of a type variable may be
reused in multiple generic contexts, and it has a different semantic meaning
in each of these contexts. This PEP proposes to eliminate this source of
confusion by declaring type parameters at a natural place within a class,
function or type alias declaration statement.

Generic type aliases are often misused because it is not clear to developers
that a type argument must be supplied when the type alias is used. This leads
to an implied type argument of ``Any``, which is rarely the intent. This PEP
proposes to add new syntax that makes generic type alias declarations
clear.

:pep:`483` and :pep:`484` introduced the concept of "variance" for a type
variable used within a generic class. Type variables can be invariant,
covariant, or contravariant. The concept of variance is an advanced detail
of type theory that is not well understood by most Python developers, yet
they are immediately confronted with the concept today when defining their
first generic class. This PEP largely eliminates the need for most developers
to understand the concept of variance when defining generic classes.

When more than one type parameter is used with a generic class or type alias,
the rules for type parameter ordering can be confusing. It is normally based on
the order in which they first appear within a class or type alias declaration
statement. However, this can be overridden in a class definition by
including a "Generic" or "Protocol" base class. For example, in the class
declaration ``class ClassA(Mapping[K, V])``, the type parameters are
ordered as ``K`` and then ``V``. However, in the class declaration
``class ClassB(Mapping[K, V], Generic[V, K])``, the type parameters are
ordered as ``V`` and then ``K``. This PEP proposes to make type parameter
ordering explicit in all cases.

The practice of sharing a type variable across multiple generic contexts
creates other problems today. Modern editors provide features like "find
all references" and "rename all references" that operate on symbols at the
semantic level. When a type parameter is shared among multiple generic
classes, functions, and type aliases, all references are semantically
equivalent.

Type variables defined within the global scope also need to be given a name
that starts with an underscore to indicate that the variable is private to
the module. Globally-defined type variables are also often given names to
indicate their variance leading to cumbersome names like "_T_contra" and
"_KT_co". The current mechanisms for allocating type variables also requires
the developer to supply a redundant name in quotes (e.g. ``T = TypeVar("T")``).
This PEP eliminates the need for the redundant name and the cumbersome
variable names.

Defining type parameters today requires importing the ``TypeVar`` and 
``Generic`` symbols from the ``typing`` module. Over the past several releases
of Python, efforts have been made to eliminate the need to import ``typing``
symbols for common use cases, and the PEP furthers this goal.


Summary Examples
================

Defining a generic class prior to this PEP looks something like this.

::

    from typing import Generic, TypeVar

    _T_co = TypeVar("_T_co", covariant=True, bound=str)

    class ClassA(Generic[_T_co]):
        ...


With the new syntax, it looks like this.

::

    class ClassA[T extends str]:
        ...


Here is an example of a generic function today.

::

    from typing import ParamSpec, TypeVar, Callable

    _P = ParamSpec("_P")
    _R = TypeVar("_R")

    def func(cb: Callable[_P, _R], *args: _P.args, **kwargs: _P.kwargs) -> _R:
        ...

And the new syntax.

::

    from typing import Callable

    def func[**P, R](cb: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:
        ...


Here is an example of a generic type alias today.

::

    from typing import TypeAlias

    _T = TypeVar("_T")

    ListOrSet: TypeAlias = list[_T] | set[_T]


And with the new syntax.

::

    type ListOrSet[T] = list[T] | set[T]


Specification
=============

Type Parameter Declarations
---------------------------

We propose to add new syntax for declaring type parameters for generic
classes, functions, and type aliases. The syntax adds support for
a comma-delimited list of type parameters in square brackets after
the name of the class, function, or type alias.

Simple (non-variadic) type variables are declared with an unadorned name.
Variadic type variables are preceded by ``*``. Parameter specifications are
preceded by ``**``.

::

    # This generic class is parameterized by a TypeVar T, a
    # TypeVarTuple Ts, and a ParamSpec P.
    class ChildClass[T, *Ts, **P]: ...

There is no need to include ``Generic`` as a base class. Its inclusion as
a base class is implied by the presence of type parameters.

Type parameter names within a generic class, function, or type alias must
be unique. Type parameters for a generic function cannot overlap the name
of a function parameter. A duplicate name generates a syntax error at compile
time.

::

    class ClassA[T, *T]: ... # Syntax Error

    def func1[T, **T](): ... # Syntax Error

    def func2[T](T): ... # Syntax Error


Type Parameter Scopes
---------------------

A type parameter declared as part of a generic class is valid only within the
class body. Type parameters are also accessible when evaluating the argument list
(base classes and any keyword arguments) that comprise the class definition.
This allows base classes to be parameterized by these type parameters. Type
parameters are not accessible outside of the class body, including in any class
decorators.

::

    class ClassA[T](BaseClass[T], param = Foo[T]): ...  # OK

    print(T)  # Runtime error: 'T' is not defined

    @dec(Foo[T])  # Runtime error: 'T' is not defined
    class ClassA[T]: ...

A type parameter declared as part of a generic function is valid only within
the function body and within parameter and return type annotations. Default
argument values are evaluated outside of this scope, so type parameters are
not accessible in default value expressions. Likewise, type parameters are not
in scope for function decorators.

::

    def func1[T](a: T) -> T: ...  # OK

    print(T)  # Runtime error: 'T' is not defined

    def func2[T](a = list[T]): ...  # Runtime error: 'T' is not defined

    @dec(list[T])  # Runtime error: 'T' is not defined
    def func3[T](): ...


Upper Bound Specification
-------------------------

For a non-variadic type parameter, an "upper bound" type can be specified
through the use of the ``extends`` keyword. If an upper bound is not specified,
the upper bound is assumed to be ``object``.

::

    class ClassA[T extends str]: ...

The ``extends`` keyword is a new soft keyword. It is interpreted as a keyword
only in this part of the grammar. In all other locations, it is assumed to
be an identifier name.

TODO: Is ``extends`` the best keyword choice? I surveyed a bunch of other
languages that support generics, and most of them use ``extends``. I'm not sure
it is Pythonic, but maybe it will just take some time to get used to it. I
explored using ``is`` instead, but that keyword already has a different
semantic meaning in Python.

The specified upper bound type must use an expression form that is allowed in
type annotations. More complex expression forms should be flagged
as an error by a type checker. Quoted forward declarations are allowed.

The specified upper bound type must be concrete. An attempt to use a generic
type should be flagged as an error by a type checker.

::

    class ClassA[T extends dict[str, int]]: ...  # OK

    class ClassB[T extends "ForwardDeclaration"]: ...  # OK

    class ClassC[T extends dict[str, V]]: ...  # Type checker error

    class ClassD[T extends [str, int]]: ...  # Type checker error

    class ClassE[T extends (str, int)]: ...  # Type checker error


Constrained Type Specification
------------------------------

For a non-variadic type parameter, a set of two or more "constrained types"
can be specified through the use of the ``in`` keyword followed by a tuple that
contains the constrained types.

::

    class ClassA[AnyStr in (str, bytes)]: ...  # OK

    class ClassB[T in ("ForwardDeclaration", bytes)]: ...  # OK

    class ClassC[T in ()]: ...  # Type checker error: two or more types requires

    class ClassD[T in (str, )]: ...  # Type checker error: two or more types requires


If the specified type is not a tuple or the tuple expression includes complex
expression forms that are not allowed in a type annotation, a type checker
should generate an error. Quoted forward declarations are allowed.

::

    class ClassE[T in [str, bytes]]: ...  # Type checker error: invalid expression form

    class ClassF[T in (3, bytes)]: ...  # Type checker error: invalid expression form


The specified constrained types must be concrete. An attempt to use a generic
type should be flagged as an error by a type checker.

::

    class ClassG[T in (list[S], str)]: ...  # Type checker error: generic type



Generic Type Alias
------------------

We propose to introduce a new statement for declaring type aliases. Similar
to ``class`` and ``def`` statements, a ``type`` statement defines a scope
for type parameters.

::

    # A non-generic type alias
    type IntOrStr = int | str

    # A generic type alias
    type ListOrSet[T] = list[T] | set[T]


The ``type`` keyword is a new soft keyword. It is interpreted as a keyword
only in this part of the grammar. In all other locations, it is assumed to
be an identifier name.

Type parameters declared as part of a generic type alias are valid only
when evaluating the right-hand side of the type alias.

As with ``typing.TypeAlias``, type checkers should restrict the right-hand
expression to expression forms that are allowed within type annotations.
The use of more complex expression forms (call expressions, trinary operators,
arithmetic operators, comparison operators, etc.) should be flagged as an
error.

We propose to deprecate the existing ``typing.TypeAlias`` introduced in
:pep:`613`. The new syntax eliminates its need entirely.


Variance Inference
------------------

We propose to eliminate the need for variance to be specified for type
parameters. Instead, type checkers will infer the variance of type parameters
based on their usage within a class. Type parameters can be invariant,
covariant, or contravariant depending on how they are used.

Python type checkers already include the ability to determine the variance of
type parameters for the purpose of validating variance within a generic
protocol class. This capability can be used for all classes (whether or not
they are protocols) to calculate the variance of each type parameter. This
eliminates the need for most developers to understand the concept of variance.
It also eliminates the need to introduce a dedicated syntax for specifying
variance.

The algorithm for computing the variance of a type parameter is as follows.

For each type parameter in a generic class:

1. If the type parameter is variadic (TypeVarTuple) or a parameter specification
(ParamSpec), it is always considered invariant. No further inference is needed.

2. If the type parameter comes from a traditional ``TypeVar`` declaration and
is not specified as ``auto_variance`` (see below), its variance is specified
by the caller. No further inference is needed.

3. Create two specialized versions of the class. We'll refer to these as
``upper`` and ``lower`` specializations. In both of these specializations,
replace all type parameters other than the one being inferred by a dummy type
instance. In the ``upper`` specialized class, specialize the target type
parameter with an ``object`` instance. In the ``lower`` specialized class,
specialize the target type parameter with itself. This specialization
ignores the type parameter's upper bound or constraints.

4. Determine whether ``lower`` can be assigned to ``upper`` using normal type
compatibility rules. If so, the target type parameter is covariant. If not,
determine whether ``upper`` can be assigned to ``lower``. If so, the target
type parameter is contravariant. If neither of these combinations are
assignable, the target type parameter is invariant.

Here is an example.

::

    class ClassA[T1, T2, T3](list[T1]):
        def method1(self, a: T2) -> None:
            ...
        
        def method2(self) -> T3:
            ...

To determine the variance of ``T1``, we specialize ``ClassA`` as follows:

::

    upper = ClassA[object, Dummy, Dummy]
    lower = ClassA[T1, Dummy, Dummy]

We find that ``upper`` is not assignable to ``lower`` nor is ``lower``
assignable to ``upper`` using standard type compatibility checks, so we
can conclude that ``T1`` is invariant.

To determine the variance of ``T2``, we specialize ``ClassA`` as follows:

::

    upper = ClassA[Dummy, object, Dummy]
    lower = ClassA[Dummy, T2, Dummy]

Since ``upper`` is assignable to ``lower``, ``T2`` is covariant.

To determine the variance of ``T3``, we specialize ``ClassA`` as follows:

::

    upper = ClassA[Dummy, Dummy, object]
    lower = ClassA[Dummy, Dummy, T3]

Since ``lower`` is assignable to ``upper``, ``T3`` is contravariant.



Auto Variance For TypeVar
-------------------------

The existing ``TypeVar`` class constructor accepts keyword parameters named
``covariant`` and ``contravariant``. If both of these are ``False``, the
type variable is assumed to be invariant. We propose to add another keyword
parameter named ``auto_variance``. A corresponding instance variable
``__auto_variance__`` can be accessed at runtime to determine whether the
variance is inferred. Type variables that are implicitly allocated using the
new syntax will always have ``__auto_variance__`` set to ``True``.

A generic class that uses the traditional syntax may include combinations of
type variables with explicit and inferred variance.

::

    T1 = TypeVar("T1", auto_variance=True)  # Inferred variance
    T2 = TypeVar("T2")  # Invariant
    T3 = TypeVar("T3", covariant=True)  # Covariant

    # A type checker should infer the variance for T1 but use the
    # specified variance for T2 and T3.
    class ClassA(Generic[T1, T2, T3]): ...


Compatibility with Traditional TypeVars
---------------------------------------

The existing mechanism for allocating ``TypeVar``, ``TypeVarTuple``, and
``ParamSpec`` is retained for backward compatibility. However, these
"traditional" type variables should not be combined with type parameters
allocated using the new syntax. Such a combination should be flagged as
an error by type checkers. This is necessary because the type parameter
order is ambiguous.

It is OK to combine traditional type variables with new-style type parameters
if the class, function, or type alias does not use the new syntax. The
new-style type parameters must come from an outer scope in this case.

::

    K = TypeVar("K")

    class ClassA[V](dict[K, V]): ...  # Type checker error

    class ClassB[K, V](dict[K, V]): ...  # OK

    class ClassC[V]:
        # The use of K and V for "method1" is OK because it uses the
        # "traditional" generic function mechanism where type parameters
        # are implicit. In this case V comes from an outer scope (ClassC)
        # and K is introduced implicitly as a type parameter for "method1".
        def method1(self, a: V, b: K) -> V | K: ...

        # The use of M and K are not allowed for "method2". A type checker
        # should generate an error in this case because this method uses the
        # new syntax for type parameters, and all type parameters associated
        # with the method must be explicitly declared. In this case, ``K``
        # is not declared by "method2", nor is it supplied defined an outer
        # scope.
        def method2[M](self, a: M, b: K) -> M | K: ...


Runtime Implementation
======================

Grammar Changes
---------------

This PEP introduces two new soft keywords: ``extends`` and ``type``. It modifies
the grammar in the following ways:

1. Addition of optional type parameter clause in ``class`` and ``def`` statements.

::
    
    type_params: '[' t=type_param_seq  ']'

    type_param_seq: a[asdl_typeparam_seq*]=','.type_param+ [',']

    type_param:
        | a=NAME b=[type_param_bound]
        | a=NAME c=[type_param_constraint]
        | '*' a=NAME
        | '**' a=NAME

    type_param_bound: "extends" e=expression

    type_param_constraint: 'in' e=expression


2. Addition of new ``type`` statement for defining type aliases.

::

    type_alias[stmt_ty]:
        | "type" n=NAME t=[type_params] '=' b=expression {
            CHECK_VERSION(stmt_ty, 12, "Type statement is", _PyAST_TypeAlias(n->v.Name.id, t, b, EXTRA)) }


AST Changes
-----------

This PEP introduces a new AST node type called "TypeAlias".

::

    TypeAlias(identifier name, typeparam* typeparams, expr value)

It also adds an AST node that represents a type parameter.

::

    typeparam = TypeVar(identifier name, expr? bound, expr? constraint)
        | ParamSpec(identifier name)
        | TypeVarTuple(identifier name)

It also modifies existing AST nodes ``FunctionDef``, ``AsyncFunctionDef`` and
``ClassDef`` to include an additional optional attribute called ``typeparam*``
that includes a list of type parameters associated with the function or class.


Compiler Changes
----------------

TODO: This section is still under development. My first attempt (which is
documented below) breaks in certain cases involving generics defined
within a ``class`` body. I'm exploring alternative approaches. If anyone has
suggestions, please let me know. In the meantime, please ignore the remainder
of this section.

If a class or function uses the new type parameter syntax, the compiler will
generate additional byte codes that cause the ``class``, ``def`` or ``type``
statements to be executed within a new scope that defines local variables with
the names of the type parameters. 

Consider the following definitions.

::

    class ClassA[T](BaseClass[T]): ...

    def func[T](a: T | None = None) -> T: ...

    type TypeAliasA[T] = list[T]
    

This is translated by the compiler to a byte code stream that is effectively
equivalent to the following:

::

    A = (lambda T: class ClassA(BaseClass[T]): ...)()

    func = (lambda T: def func(a: T | None))(defaults=(None, ))

    TypeAliasA = types.TypeAliasType()
    TypeAliasA.__value__ = (lambda T: list[T])()

The introduction of an additional lexical scope is necessary to provide the
appropriate scope for the type parameters, preventing them from "leaking" to
other scopes.

One side effect of this approach is that assignment expressions used within
class definition arguments will not apply to the scope that contains the
``class`` definition. We consider this an acceptable tradeoff because we are
unaware of any use cases for an assignment expression within a class argument.

::

    class ClassA[T]((x := BaseClass[T])):
        ...
    
    # x is not defined in this scope.

    class ClassB((y := BaseClass[int])):
        ...
    
    # y is defined in this scope.


Similarly, assignment expressions used within a parameter or return type
annotation within a generic function will not apply to the scope that contains
the ``def`` definition. In general, assignment expressions are not allowed
within type annotations. While they are technically allowed within ``Annotated``
expressions, we are unaware of any uses cases that rely on this behavior.

::

    def func1[T](a: Annotated[T, (x := 1)]):
        ...

    # x is not defined in this scope.

    def func2(a: Annotated[int, (y := 1)]):
        ...

    # y is defined in this scope.


Class and function declaration statements that do not use the new syntax are
executed normally, without the introduction of an additional scope. This
preserves full backward compatibility and limits the potential performance
impact of the new syntax.

All ``type`` statements are executed within a new scope.


Reference Implementation
========================

The Pyright type checker supports the behavior described in this PEP.

A reference implementation for CPython can be found 
`here <https://erictraut/cpython/typeparam>`_.

TODO: Update the above URL once reference implementation is
pushed to github. It is current working as a proof of concept, but there
are aspects of the spec that remain unimplemented.


Rejected Ideas
==============

TODO - need to complete


References
==========

TODO - need to complete


Copyright
=========

This document is placed in the public domain or under the CC0-1.0-Universal
license, whichever is more permissive.
