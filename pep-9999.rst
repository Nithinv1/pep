PEP:	9999
Title:	Provide an observer magic method for assignation to an object
Author:	Ganesh B, ganeshsurfs@gmail.com
Status:	Opened
Type:	Process
Created:	01-Jan-2020
Post-History:	


========
Abstract
========

Observability is an import aspect of object life cycle.  Magic methods for most operations
from initialization (__init__), to augmented assignment (+=, -=), to comparison (__eq__), to 
delete (__del__) is available.  However, assign operator (= : __assign__) magic method 
is not available.


==========
Motivation
==========

Observability of an object value solves a lot of problem - ranging from a value 
assignation checks, to value mutations/removals, to change of type checks 
for specific cases. 

A lot of attempts have been made using Observability pattern to track attribute and 
property value change of a class. RxPY, also adds Observability to objects.  The 
stackoverflow question does a fairly good job at answering the capture of 
value change, as in the question `Python Triggering function on value change`_.

Set attribute (__setattr__) also works for attribute of a class as answered 
in the question `Python global variable change`_.

However, while re-assigning of new value (of same or different type) to the 
entire object the setattribute (__setattr__) magic method does not work or is 
incapable of observing object's value or type changes. 


Example Implementation
======================

::

   class Observable:
      value = None
      def __init__(self, val):
         self.value = val
      def __setattr__(self, name, value):
         # Observe implementation
         pass

   varname = Observable("value")
   varname = 10 # Cannot be observed

Second, if variable is a standalone variable, like a global variable, applying 
a observer is almost impossible.  More, if there is re-assignation of new value 
of type it cannot be observed nor can be captured as in `Python global variable value change capture`_


Example Implementation
======================

::

   varname = 20
   varname = 10 # Cannot be observed
   varname = "Different Aata type" # Cannot be observed


========================
What has been attempted:
========================

Custom Observable object suggestion provided (work - around) in `Python global variable change`_.

Example Implementation
======================

::

   class CaptureOnSetAttribute:
      def __setattr__(self, attr, value):
         # our hook to do something
         print(f'set value of {attr} to {value}')
         # actually set the attribute the normal way after
         super().__setattr__(attr, value)

   wrapper_object = CaptureOnSetAttribute()
   wrapper_object.monitored_attribute = value


However, there is a catch of re-assignation as below:

Example Implementation
======================

::

   wrapper_object = "New different data type" # cannot be observed
   globalvarname = 10 # cannot be observed
   globalvarname = "Different data type" # Cannot be observed


=========
Attempts:
=========


1. __builtins__ type modification
---------------------------------
__builtins__ used to change implementation of str, int, list, etc default 
functions. It did not work due to the very nature of Python being a dynamically types language.

Example Implementation
======================

::

   class MyStr(str):
      # implement custom __setattr__
      def __setattr__():
         pass
         # implemented custom observable instead of pass

   __builtins__.__dict__.update(**dict(str=MyStr, dict=MyDict))

   varname = str("val")
   varname = 10 # Cannot be observed
   varname = "Different data type" # Cannot be observed


2. __builtins__ object modification
-----------------------------------
__builtins__ used to change implementation of object default function. Did not 
work failing with all objects not inheriting the changed object implementation.

Example Implementation
======================

::

   class Object(object):
      # implement custom __setattr__
      def __setattr__():
         # implement observable
         pass

   __builtins__.__dict__.update(**dict(object=Object))

   varname = object("val")
   varname = 10 # Cannot be observed
   varname = "Different data type" # Cannot be observed


3. globals() object modification
---------------------------------
globals() default function reimplentation did not work.  A direct 
assignation using globals()["key"] changes due to re-assignation cannot not be captured.

Example Implementation
======================

::

   def globals():
      # implementation with
      # observable
      return ObservedGlobalsFunction()
   g = globals() # new observed function invoked

   globals()["key"] = 10 # Cannot be observed
   globals()["key"] = "New Data type" # Cannot be observed


4. pdb trace
------------
Using pdb trace was provided in one stackoverflow suggestion.  I found 
this cumbersome and could be very slow even if implemented.


5. Tkinter Observers
--------------------
Using Tkinter's observe value for change methods was another suggestion.


6. __assign__ observers
-----------------------
Using assign package __assign__ .  I though this was a valid suggestion and 
was a C library.  But it did not work as intended as was mentioned.

This suggestion grew out of this library `Python Triggering function on value change`_.


1. Demo codes in this file provided are from actual work.
2. Demo non-working implementation seemed to be an actual work which does not work as suggested in `Python Assign- Triggering function on value change`_.
3. Questions that did not accumulate any responses for the same as in `Python global variable value change capture`_ , `Python observer with RxPY`_, `Python global variable change`_.


=========
Rationale
=========

The magic method to capture the value assignation or re-assignation change 
possible looks the only way there can be an observation on a value change 
or a change in type of the object


=============
Specification
=============

I recommend the following assignation/re-assignation observer (__before_assign__ 
and __after_assign__ magic method) implementation for all python 
object classes with an inheritance of class type.


1. Usage ONE:
-------------
The assignation capture/observer will be useful when you want to capture value 
changes in the code without having to watch every variable using any debugger 
module or workaround observer wrappers.


2. Usage TWO:
-------------
The assignation capture/observer will be useful when you want to do dynamic type 
checking for some variables only.


3. Usage THREE:
---------------
The assignation capture/observer will be useful for linters to project errors 
statically using the before and after magic method implementation.


PREFERRED: __before_assign__ AND __after_assign__ MAGIC METHOD
==============================================================


I recommend the following assignation/re-assignation observer (__before_assign__ 
and __after_assign__ magic method) implementation for all python 
object classes with an inheritance of class type.

The __before_assign__ and __after_assign__ magic method in a class.  The 
__before_assign__ runs before assignation is completed and the __after_assign__ 
runs after assignation is completed.


EXAMPLE __before_assign__ and __after_assign__
-----------------------------------------------

::

   class Anyclass():
      def __before_assign__(self, target_name, old_value, new_value):
         
         # Your custom assignation/re-assignation observer implementation
         # This implementation should run before the value is changed
         
            print("Value changing to ", target_name, old_value, new_value)
      
      def __after_assign__(self, target_name, old_value, new_value):   
         
         # Your custom assignation/re-assignation observer implementation
         # This implementation should run after the value is changed
         
            print("Value changed to ", target_name, old_value, new_value)

   obj = Anyclass()
   obj = 10 
   print(obj)

   # prints out => "Value changing to ", 'Anyclass', <INSTANCE:class __main__.Anyclass>, 10
   # prints out => "Value changed to ", 'Anyclass', <INSTANCE:class __main__.Anyclass>, 10
   # prints out => 10


ALTERNATIVE: The __assign__ MAGIC METHOD
========================================

ALTERNATIVELY, I recommend the following assignation/re-assignation 
observer (__assign__) implementation for all python object classes 
with an inheritance of class type.

The magic method can be named after the package Assign (__assign__ magic method) 
implementation in .  A C library that is not functional for me in linux 3.x (v3.5+).  
It did not work as intended and as was mentioned.  This PEP suggestion grew 
out of this library.


EXAMPLE __assign__:
-------------------

::

   class Anyclass():
      def __assign__(self, target_name, old_value, new_value, flags=[before, after]):
         
         # Your custom assignation/re-assignation observer implementation
         
         if "before" in flags:
            # This implementation should run before the value is changed
            print("Value changing to ", target_name, old_value, new_value, flags)
         
         elif "after" in flags:
            # This implementation should run after the value is changed
            print("Value changed to ", target_name, old_value, new_value, flags)

   obj = Anyclass()
   obj = 10 
   print(obj)

   # prints out => "Value changing to ", 'Anyclass', <INSTANCE:class __main__.Anyclass>, 10
   # prints out => "Value changed to ", 'Anyclass', <INSTANCE:class __main__.Anyclass>, 10
   # prints out => 10


=======================
Backwards Compatibility
=======================

I recommend patch support of all versions of 2.x and 3.x that 
support dunder methods of __init__, __call__, and __del__


=====================
Security Implications
=====================

- Not checked until now for "Security issues". 

- I `foresee` performance and memory issue, if misused. A developer or a hacker can misuse this method by implementing a implementation on all objects and replacing the default unimplemented method on a object using the __builtins__ to create a PERFORMANCE (slowness) problem or a interval based MEMORY LEAK problem.

- However, any observable on a object assignation (even __init__ or __del__) using libraries like RxPY or a language implementing the native implementation will pose this issue.


=================
How to Teach This
=================

IMPLEMENTATION SHARED IN SPECIFICATION.


========================
Reference Implementation
========================

A C library that is not functional.  It did not work as intended as was 
mentioned.  This suggestion grew out of this 
library mentioned in `Python Assign- Triggering function on value change`_

I wonder why this was not implemented


==============
Rejected Ideas
==============

N.A.


===========
Open Issues
===========

N.A.


==========
References
==========

.. _Python Triggering function on value change: https://stackoverflow.com/questions/11024646/is-it-possible-to-overload-python-assignment
.. _Python Assign- Triggering function on value change: https://stackoverflow.com/questions/11024646/is-it-possible-to-overload-python-assignment
.. _Python global variable value change capture: https://stackoverflow.com/questions/59703221/how-do-i-capture-the-action-of-reassignation-of-value-to-global-variable
.. _Python global variable change: https://stackoverflow.com/questions/59675250/capture-change-of-global-variable-value-in-python
.. _Python observer with RxPY: https://stackoverflow.com/questions/59721925/capture-value-change-of-variable-with-literal-value-with-globals-scope-in-rxpy


=========
Copyright
=========

This document is placed in the public domain or under the 
CC0-1.0-Universal license, whichever is more permissive.


=========
Resources
=========

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
