PEP: 2
Title: Procedure for Adding New Modules
Version: $Revision$
Last-Modified: $Date$
Author: Brett Cannon <brett@python.org>,
        Martijn Faassen <faassen@infrae.com>
Status: Active
Type: Process
Content-Type: text/x-rst
Created: 07-Jul-2001
Post-History: 07-Jul-2001, 09-Mar-2002


Introduction
============

The Python Standard Library contributes significantly to Python's
success.  The language comes with "batteries included", so it is easy
for people to become productive with just the standard library alone.
It is therefore important that the usefulness of the standard library
be maintained.

Due to the visibiity and importance of the standard library, it must
be maintained thoughtfully. Any code in the standard library must be
maintained by Python's development team, and so there is a perpetual
cost to each addition to the standard library. There is also a
cognitive cost for users in familiarizing themselves with what is in
the standard library. All of this requires taking a measured approach
towards what is allowed to be added to the standard library.

New functionality is commonly added to the library in the form of new
modules. This PEP will describe the procedure for the *addition* of
new modules.  :pep:`4` deals with procedures for deprecation of modules;
the *removal* of old and unused modules from the standard library.


Acceptance Procedure
====================

For top-level modules/packages, a PEP is required. The procedure for
writing a PEP is covered in :pep:`1`.

For submodules of a preexisting package in the standard library, it is
at the discretion of the general Python development team and its
members.

General guidance on what modules typically are accepted into the
standard library, the overall process, etc. are covered in the developer's
guide [1]_.


Maintenance Procedure
=====================

Anything accepted into the standard library is expected to be
primarily maintained there, within Python's development infrastructure.
While some members of the development team may choose to maintain a
backport of a module outside of the standard library, it is up to them
to keep their external code in sync as appropriate.


References
==========

.. [1] Adding to the Stdlib
   (http://docs.python.org/devguide/stdlibchanges.html)

Copyright
=========

This document has been placed in the public domain.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   fill-column: 70
   coding: utf-8
   End:
