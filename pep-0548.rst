PEP: 548
Title: The "python" Command on Unix-Like Systems (2017 update)
Version: $Revision$
Last-Modified: $Date$
Author: Nick Coghlan <ncoghlan@gmail.com>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 31-Jul-2017
Replaces: 394

Abstract
========

This PEP provides an updated convention to help ensure that Python scripts can
continue to be portable across ``*nix`` systems, regardless of the default
version of the Python interpreter (i.e. the version invoked by the ``python``
command), and without requiring platforms to provide parallel Python 2 & 3
stacks indefinitely.

* ``python2`` will refer to some version of Python 2.x.
* ``python3`` will refer to some version of Python 3.x.
* ``python`` should either be absent, refer to Python 2.7 *or* refer to
  Python 3.6+.
* if a ``python`` link is provided, the target Python interpreter should provide
  the ``six`` compatibility library by default.
* currently Python 2 only scripts should either be updated to be source
  compatible with Python 3 or else to use ``python2`` in the shebang line.
* Cross-platform applications should be updated to be independent of the default
  Python version in the target deployment environment.

Developed in 2017, these recommendations supersede the previous recommendations
published in 2012 (PEP 394). They differ mainly in granting platform providers
more scope to effectively manage the eventual removal of their Python 2.7
stacks.


Recommendations for Development of Standalone Scripts
=====================================================

* standalone scripts that are incompatible with Python 2.x should specifically
  target ``python3``.
* standalone scripts that are incompatible with Python 3.x, and do not need to
  gain compatibility with platforms that only provide Python 3.x, should
  specifically target ``python2`` (as this is available by default almost
  everywhere that Python 2 is available, and is easily added as a symlink if
  it is missing).
* standalone scripts that want to support both older platforms where ``python``
  refers to ``python2`` *and* newer platforms where it refers to ``python3``
  should be updated to run in the common subset of Python 2 & 3.6+ using
  either the `regular porting guide`_ in the Python reference documentation or
  else the `conservative porting guide`_ developed as part of Fedora's migration
  to using Python 3 as the system Python runtime.
* standalone scripts designed to run under both Python 2 and 3 may reasonably
  require the availability of the ``six`` compatibility library. However,
  avoiding this runtime dependency will improve compatibility with older
  platforms that don't provide that component by default.
* These distinctions should be made in shebang lines for Python scripts, when
  invoking Python from shell scripts, when invoking Python via the C
  ``system()`` call, or when invoking Python in any other context.
* When reinvoking the interpreter from a Python script, querying
  ``sys.executable`` to avoid hardcoded assumptions regarding the
  interpreter location remains the preferred approach.

.. _regular porting guide: https://docs.python.org/3/howto/pyporting.html
.. _conservative porting guide: https://portingguide.readthedocs.io/en/latest/process.html


Recommendations for Development of Cross-Platform Applications
==============================================================

* cross-platform applications should use appropriate mechanisms (such as Python
  virtual environments or system level application containers) to avoid
  depending on the default version of Python installed on any particular
  deployment platform.


Recommendations for Platform Providers
======================================

* Unix-like software distributions (including systems like Mac OS X and
  Cygwin) should install the ``python2`` command into the default path
  whenever a version of the Python 2 interpreter is installed, and the same
  for ``python3`` and the Python 3 interpreter.
* When  invoked, ``python2`` should run some version of the Python 2
  interpreter, and ``python3`` should run some version of the Python 3
  interpreter.
* The more general ``python`` command should be handled using one of the
  following techniques:

  * if present, always refers to the same target as ``python2``
    (e.g. Debian 7/8/9, RHEL/CentOS 5/6/7, Ubuntu LTS 14.04 & 16.04)
  * if present, always refers to the same target as ``python3``
    (e.g. Arch, OpenMandriva)
  * if present, refers to the same target as ``python3`` by default, can be
    switched by a system administrator to refer to the same target as
    ``python2`` (e.g. Gentoo)
  * absent by default (even when ``python2`` and ``python3`` are available),
    but system administrators can explicitly opt-in to having it refer to either
    ``python2`` (for full compatibility with Python-2-only distributions) or
    ``python3`` (for compatibility with cross-version shebang lines without
    installing a second Python runtime environment) (e.g. proposal currently
    in development for Fedora 27+)

Additional recommendations when providing a ``python`` command:

* The Python 2.x ``idle``, ``pydoc``, and ``python-config`` commands should
  be made available as ``idle2``, ``pydoc2``, and ``python2-config``,
  with the original unqualified commands invoking either ``python2`` or
  ``python3`` in accordance with the target version for ``python``.
* Regardless of whether it refers to ``python2`` or ``python3``, if a ``python``
  link is provided the target Python stack should include the``six``
  compatibility library by default, as having this library available
  significantly increases the common subset of Python 2.7 and 3.6+.
* If a ``python`` link targets ``python3``, the target version should be at
  least 3.6+ in order to provide access to:

  * Python 2 style explicit Unicode literals (restored in 3.3)
  * convenience aliases for binary codecs (restored in 3.4)
  * printf-style formatting on bytes objects: ``b"%s: %d" % (field_name, value)``
    (restored in 3.5)
  * improved error messages for Python 2 style print statements (initially
    improved in 3.4.2, subsequently enhanced further with suggested calls to
    the print builtin in 3.6.3)

* If a ``python`` link targets ``python3``, the platform should also implement
  PEP 538's locale coercion or a comparable mechanism in order to reduce the
  likelihood of unexpected Unicode decoding and encoding errors when running
  standalone scripts that expect Python 2's permissive Unicode handling model


Rationale
=========

These recommendations arise from changes in community and redistributor
practices in the 5+ years since the initial redistributor guidance in PEP 394
was adopted. For example, in Python 3.6, the Python Windows Launcher was updated
to prefer the latest installed version of Python 3 to Python 2 when invoked
interactively, rather than launching Python 2 by default when both are present.

Outside the core development process, many core projects within the wider
ecosystem are actively planning to drop Python 2.7 support in order to take
full advantage of new features introduced in Python 3 (e.g. [1]_, [2]_)

The specific motivation for this update relates to Fedora looking for a way to
continue to provide support for cross-platform scripts deliberately written to
target the common subset of Python 2.7 and 3.5+, while also devising a
strategy for eventually removing the Python 2 stack from the distribution some
time after the end of upstream community support for the Python 2.7 development
branch in 2020.

By explicitly requiring that, if present, ``python`` refer to ``python2``,
the previous guidance in PEP 394 didn't allow for the development of such
forward-looking post-2.7-EOL approaches without explicitly going against
upstream's design recommendations.

While this was the most user-friendly advice we could offer in 2012, 2020 is
now only a few years away, and a number of distributions have been shipping
without a default ``python`` command at all for a number of years, which
provides plenty of opportunity for system administrators and other end users
previously unaware of the language version migration to encounter errors like
the following::

    $ ./my_script.py
    bash: ./my_script.py: /usr/bin/python: bad interpreter: No such file or directory

And then seek clarification through the appropriate platform specific channels.

The previous guidance also didn't fully allow for the fact that different
redistributors have different audiences, and hence different levels of
tolerance for introducing backwards compatibility risks for their users.

Finally, not only has the common subset of Python 2 and 3 grown over the years,
but a number of the potentially confusing error messages emitted when running
Python 2 scripts on Python 3 have improved markedly since the initial Python 3
releases. For example, starting in 3.6.3, syntax errors prompted by Python 2
style print statements now explicitly propose the Python 3 equivalent::

    >>> print "Hello, world!"
      File "<stdin>", line 1
        print "Hello, world!"
                            ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Hello, world!")?


Future Changes to this Recommendation
=====================================

It is anticipated that once the Python 2.7 branch is no longer receiving even
security updates, we will actively recommend against platforms providing a
Python 2.7 stack at all, let alone as the default target of the unqualified
``python`` command.

Accordingly, this recommendation is expected to next be reviewed some time after
regular maintenance releases for the Python 2.7 series end in 2020.


Migration Notes
===============

This section does not contain any official recommendations from the core
CPython developers. It's merely a collection of notes regarding various
aspects of migrating to Python 3 as the default version of Python for a
system. They will hopefully be helpful to any distributions considering
making such a change.

* The main barrier to a distribution switching the ``python`` command from
  ``python2`` to ``python3`` isn't breakage within the distribution, but
  instead breakage of private third party scripts developed by sysadmins
  and other users. Updating the ``python`` command to invoke ``python3``
  by default indicates that a distribution is willing to break such scripts
  with errors that are potentially quite confusing for users that aren't
  yet familiar with the backwards incompatible changes in Python 3. For
  example, while the error messages for ``print`` statements specifically have
  been progressively improved, other kinds of errors are still going to be
  confusingly cryptic::

      >>> halfway = seq[len(seq) / 2]
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
      TypeError: list indices must be integers or slices, not float

  (The problem here is that truncating division must be explicitly requested
  in Python 3 using the ``//`` operator, but the indexing operation only knows
  that it unexpectedly received a float when it expected an integer, and hence
  can't provide a clearer error message)
* Avoiding breakage of such third party scripts is the key reason this
  PEP includes having ``python`` continue to refer to ``python2`` as one of its
  recommended approaches. The decision on if, when, and how to change that
  situation then rests entirely with the platform provider.
* Similarly, allowing for the ``python`` command to be absent by default, and
  requiring users to explicitly decide whether it should remain absent or
  instead refer to ``python2`` or ``python3``, gives redistributors space to
  ensure that attempting to run historically Python-2-only scripts (i.e. those
  targeting ``python``) on Python 3 fails outright by default, ideally with
  a suitable error message explaining the options for installing the missing
  command
* The ``pythonX.X`` (e.g. ``python2.6``) commands exist on some systems, on
  which they invoke specific minor versions of the Python interpreter. It
  can be useful for distribution-specific packages to take advantage of these
  utilities if they exist, since it will prevent code breakage if the default
  minor version of a given major version is changed. However, scripts
  intending to be cross-platform should not rely on the presence of these
  utilities, but rather should be tested on several recent minor versions of
  the target major version, compensating, if necessary, for the small
  differences that exist between minor versions. This prevents the need for
  sysadmins to install many very similar versions of the interpreter.
* When the ``pythonX.X`` binaries are provided by a distribution, the
  ``python2`` and ``python3`` commands should refer to one of those files
  rather than being provided as a separate binary file.
* It is suggested that even distribution-specific packages follow the
  ``python2``/``python3`` convention, even in code that is not intended to
  operate on other distributions. This will reduce problems if the
  distribution later decides to change the version of the Python interpreter
  that the ``python`` command invokes, or if a sysadmin installs a custom
  ``python`` command with a different major version than the distribution
  default. Distributions can test whether they are fully following this
  convention by changing the ``python`` interpreter on a test box and checking
  to see if anything breaks.
* If the above point is adhered to and sysadmins are permitted to change the
  ``python`` command, then the ``python`` command should always be implemented
  as a link to the interpreter binary (or a link to a link) and not vice
  versa. That way, if a sysadmin does decide to replace the installed
  ``python`` file, they can do so without inadvertently deleting the
  previously installed binary.
* If the Python 2 interpreter becomes uncommon, scripts that aren't taking any
  particular steps to ensure cross-version compatibility should nevertheless
  continue to use the ``python3`` convention rather that just ``python``.
* If these conventions are adhered to, it will become the case that the
  ``python`` command is only executed in an interactive manner as a user
  convenience, or to run scripts that are source compatible with both Python
  2 and Python 3.


Availability of Version-Specific Commands
=========================================

A potential problem can arise if a script adhering to the
``python2``/``python3`` convention is executed on a system not supporting
these specific commands but otherwise providing a suitable Python interpreter.

This is mostly a non-issue, as not only are these commands now
near ubiquitous following the 2012 adoption of PEP 394, but even they're
missing with not platform provided way of adding them, a system administrator
can simply create these symbolic links and avoid further problems.

It is a significantly more obvious breakage than the sometimes cryptic errors
that can arise when attempting to execute a script containing Python 2 specific
syntax with a Python 3 interpreter.


Impact on PYTHON* Environment Variables
=======================================

The choice of target for the ``python`` command implicitly affects a
distribution's expected interpretation of the various Python related
environment variables. The use of ``*.pth`` files in the relevant
``site-packages`` folder, the "per-user site packages" feature (see
``python -m site``) or more flexible tools such as Python virtual environments
are all more tolerant of the presence of multiple versions of Python on a
system than the direct use of ``PYTHONPATH``.


Exclusion of MS Windows
=======================

As with PEP 394, this PEP deliberately excludes any proposals relating to
Microsoft Windows, except insofar as it covers environments like Cygwin and
the Windows Subsystem for Linux.

Instead, Windows continues to be handled through the custom shebang line
processor initially described in PEP 397, as amended in subsequent Python
releases.


Acknowledgements
================

Many of the details in this version of the recommendations have been carried
over from PEP 394, so the common text is the combined work of Nick Coghlan,
Kerrick Staley, and Barry Warsaw.


References
==========

.. [1] Python 2 deprecation plans for key scientific libraries
   (http://www.python3statement.org/)

.. [2] Python compatibility statement for the upcoming Django 2.0 release
   (https://docs.djangoproject.com/en/dev/releases/2.0/#python-compatibility)

.. [3] Initial linux-sig post from the Fedora Python maintainers
   ()

Copyright
===========
This document has been placed in the public domain.
