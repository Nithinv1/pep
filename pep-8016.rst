PEP: 8016
Title: The Steering Council Model
Author: Nathaniel J. Smith, Donald Stufft
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 2018-11-01

Abstract
========

This PEP proposes a model of Python governance based around a steering
council. The council has broad authority, which they seek to exercise
as rarely as possible; instead, they should use this power to
establish standard processes, like those proposed in the other
801x-series PEPs. This follows the general philosophy that it's better
to split up large changes into a series of small changes that can be
reviewed independently: instead of trying to do everything in one PEP,
we focus on providing a minimal-but-solid foundation for further
governance decisions.


Specification
=============

The steering council
--------------------

Composition
~~~~~~~~~~~

The steering council is an elected committee of 5 core team members.


Mandate
~~~~~~~

XX

The steering council will:

* Maintain the quality and stability of the Python language and
  CPython interpreter.
* Establish appropriate decision-making processes XX
* [XX something about balancing different user needs? diversity of
  core team? still trying to figure out how to phrase this]
* [XX sometihng about humane processes, collegiality, that kind of thing?]
* Seek consensus among contributors and the core team before acting
* Formalize and maintain the Python project's relationship with the PSF.
* Act as a "court of final appeal" for decisions where all other
  methods have failed.


Powers
~~~~~~

The council has broad authority to make decisions about the project.
For example, they can:

* Accept or reject PEPs
* Choose how to manage project resources (in collaboration with the
  PSF)
* Delegate this authority to other subcommittees or processes

However, they cannot modify this PEP, or affect the membership of the
core team, except via the mechanisms specified in this PEP.

The council should look for ways to use these powers as little as
possible. Instead of voting, it's better to seek consensus. Instead of
ruling on individual PEPs, it's better to define a standard process
for PEP decision making (for example, by accepting one of the other
801x series of PEPs). It's better to establish a Code of Conduct
committee than to rule on individual cases. And so on.

To use its powers, the council votes. Every council member must either
vote or explicitly abstain. Members with conflicts of interest on a
particular vote must abstain. Passing requires a strict majority of
non-abstaining council members.

Whenever possible, the council's votes and deliberations shall be held
in public.


Electing the council
~~~~~~~~~~~~~~~~~~~~

A council election consists of two phases:

* Phase 1: Candidates advertise their interest in serving. Only core
  team members may be candidates.
* Phase 2: Each core team member can vote for zero to five of the
  candidates. Voting is performed anonymously. Candidates are ranked
  by the total number of votes they receive. In case of a tie, the
  candidate who joined the core team earlier wins.

Each phase lasts one to two weeks, at the outgoing board's discretion.
For the initial election, both phases will last two weeks.

The election process is managed by a returns officer nominated by the
outgoing technical board. For the initial election, the returns
officer will be [TBD].


Term
~~~~

A new council is elected after each feature release. There are no term
limits.


Vacancies
~~~~~~~~~

Council members may resign their position at any time.

Whenever there is a vacancy during the regular council term, the
council may vote to appoint any willing core team member to serve out
the rest of the term.

If a council member drops out of touch and cannot be contacted for a
month or longer, then the rest of the council may vote to replace
them.


Conflicts of interest
~~~~~~~~~~~~~~~~~~~~~

While we trust council members to act in the best interests of Python
rather than themselves or their employers, the mere appearance of any
one company dominating Python development could itself be harmful and
erode trust. In order to avoid any appearance of conflict of interest,
at most 2 members of the council can work for any single employer.

In a council election, if 3 of the top 5 vote-getters work for the
same employer, then the lowest-ranking is disqualified and the
6th-ranking candidate moves up into 5th place; this is repeated until
a valid council is formed.

During a council term, if changing circumstances cause this rule to be
broken (for instance, due to a council member changing employment),
then one or more council members must resign to remedy the issue, and
the resulting vacancies can then be filled as normal.


Recall
~~~~~~

In exceptional circumstances, a council member may be recalled by a
vote of the membership.

A recall vote is triggered when a core team member calls for a recall
on an appropriate project communication channel, and another core team
member seconds the proposal. The call must specify either which
council member they seek to recall, or else that they seek to recall
the whole council.

A recall vote lasts for two weeks. Core team members vote for or
against the recall. If four fifths of voters vote to recall, then
council member loses their position on the council, or if the whole
council was recalled, then an election is held to form a new council.


The core team
-------------

Role
~~~~

The core team is the group of trusted volunteers who manage Python.
They assume many roles required to achieve the project's goals,
especially those that require a high level of trust. They make the
decisions that shape the future of the project.

Core team members are expected to act as role models for the community
and custodians of the project, on behalf of the community and all
those who rely on Python.

They will intervene, where necessary, in online discussions or at
official Python events on the rare occasions that a situation arises
that requires intervention.

They have authority over the Python Project infrastructure, including
the Python Project website itself, the Python GitHub organization and
repositories, the bug tracker, the mailing lists, IRC channels, etc.


Prerogatives
------------

Core team members may participate in formal votes, typically to nominate new
team members and to elect the steering council.


Membership
----------

Python core team members demonstrate:

- a good grasp of the philosophy of the Python Project
- a solid track record of being constructive and helpful
- significant contributions to the project's goals, in any form
- willingness to dedicate some time to improving Python

As the project matures, contributions go beyond code. Here's an
incomplete list of areas where contributions may be considered for
joining the core team, in no particular order:

- Working on community management and outreach
- Providing support on the mailing lists and on IRC
- Triaging tickets
- Writing patches (code, docs, or tests)
- Reviewing patches (code, docs, or tests)
- Participating in design decisions
- Providing expertise in a particular domain (security, i18n, etc.)
- Managing the continuous integration infrastructure
- Managing the servers (website, tracker, documentation, etc.)
- Maintaining related projects (alternative interpreters, core
  infrastructure like packaging, etc.)
- Creating visual designs

Very few areas are reserved to core team members:

- Reviewing security reports
- Merging patches (code, docs, or tests)
- Packaging releases

Core team membership acknowledges sustained and valuable efforts that
align well with the philosophy and the goals of the Python Project.

It is granted by a four fifths majority of votes cast in a core team
vote and no veto by the technical board.

Core team members are always looking for promising contributors,
teaching them how the project is managed, and submitting their names
to the core team's vote when they're ready. If you would like to join
the core team, [XX what link should we use? or is it better to leave
this vague here because the advice might change and this document is
hard to update?]

There's no time limit on core team membership. However, in order to
provide the general public with a reasonable idea of how many people
maintain Python, core team members who have stopped contributing are
encouraged to declare themselves as "emeritus members". Those who
haven't made any non-trivial contribution in two years may be asked to
move themselves to this category, and moved there if they don't
respond. Emeritus team members lose their privileges such as voting
rights and commit access.


Changing this document
----------------------

Changes to this document require a four fifths majority of votes cast
in a core team vote and no veto by the technical board.


TODO
====

- It seems like there should be *some* mechanism to get rid of core
  team members in exceptional circumstances (e.g., truly egregious
  behavior). What should it look like? There's some back-and-forth in
  `this thread
  <https://discuss.python.org/t/working-discussion-for-pep-8016-the-boringest-possible-steering-council-model>`__.

- What should the supermajority threshold be? Donald `suggested
  <https://discuss.python.org/groups/committers>`__ 2:1 for recalls,
  while django uses 4:1 for everything else (accepting core team
  members, changing the constitution). I don't really care? 4:1 is
  pretty extreme compared to most projects I've seen (e.g. debian uses
  3:1 for changing their constituion). I just left everything at 4:1
  for now, but we can change it.

- Add compare-and-contrast with other 801x proposals

- Any authors that should be added?

- It looks like Aymeric Augustin wrote the whole Django doc, so
  presumably holds copyright; maybe we should ask him if he's willing
  to release it into the public domain so our copyright statement
  below becomes simpler.


Rationale
=========

Goals:

* Be **simple**: We've attempted to pare things down to the minimum
  needed to make this workable.
* Be **comprehensive**: But for the things we need to define, we've
  tried to make sure to cover all the bases.
* Be **boring**: We're not experts in governance, and innovating in
  governance is not Python's major strength. So we've tried to stick
  to boring, well-known, previously tested processes as much as
  possible. When in doubt, we just copied what Django does.
* Be **flexible**: We know that it will take time and experimentation
  to find the best processes for working together; by keeping this
  document as minimal as possible, we keep maximal flexibility for
  adjusting things later, without heavy-weight processes like
  another PEP 8001-style vote.

XX


Acknowledgements
================

Substantial text was copied shamelessly from `The Django project's
governance document
<https://docs.djangoproject.com/en/dev/internals/organization/>`__.


Copyright
=========

Text copied from Django used under `their license
<https://github.com/django/django/blob/master/LICENSE>`__. The rest of
this document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
