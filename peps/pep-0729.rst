PEP: 0729
Title: Introduction of the View Type for Static Typing
Author: Juho Kim <juho.kim@mail.utoronto.ca>
Status: Draft
Type: Standards Track
Topic: Typing
Content-Type: text/x-rst
Created: 20-Sep-2023
Python-Version: 3.11


Abstract
========

This PEP proposes the introduction of a View type hint to indicate attributes
that are readable both internally and externally but should only be writable
internally. This will offer a clearer intent than current conventions without
requiring property methods.


Motivation
==========

Python developers commonly use the underscore prefix convention to denote
private or protected members of a class. This often leads to the addition of
public methods to expose these members in a controlled manner. The introduction
of the ``View`` type would make this pattern more explicit and potentially less
error-prone, without the need to use getters.


Specification
=============

The ``View`` type hint is to be used as:

.. code-block:: python

   from typing import View
   

   class MyClass:
       def __init__(self) -> None:
           self.my_attr: View[int] = 0

The above indicates that ``MyClass.my_attr`` can be read both internally and
externally, but should not be modified externally.

The above is equivalent to below if ``typing.View`` is not used:

.. code-block:: python

   class MyClass:
       def __init__(self) -> None:
           self._my_attr = 0

       @property
       def my_attr(self) -> int:
           return self._my_attr

Implementation
==============

This will not be enforced at runtime but can be utilized by static analysis
tools, such as mypy. Such tools would need to be updated to understand and
enforce this new type hint. The exact errors or warnings to be thrown can be
determined later, but a possible suggestion could be: "External modification of
'View' type attribute."

Backwards Compabitibility
=========================

As this is a new type hint, it shouldn't introduce breaking changes. However,
tooling that would enforce this type hint would need to be updated.
