PEP: 596
Title: Use UTF-8 for default text file encoding
Author: Inada Naoki  <songofacandy@gmail.com>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 04-Jun-2019
Python-Version: 3.9

Abstract
========

Currently, ``TextIOWrapper`` uses ``locale.getpreferredencoding(False)``
when ``encoding`` is not specified.

This PEP proposes changing the default encoding to "UTF-8" regardless of
platform or locale.


Motivation
==========

People assume UTF-8 always
--------------------------

Package authors using macOS or Linux may forget that the default encoding
is not always UTF-8.

For example, ``long_description = open("README.md").read()`` in
``setup.py`` is common mistake.  If there are at least one emoji or any
other non-ASCII characters in the ``README.md`` file, many Windows users
cannot install the package by ``UnicodeDecodeError``.


Code page is not stable
-----------------------

Some tools on Windows change code page to 65001 (UTF-8), and Microsoft
is using UTF-8 and cp65001 more widely in recent Windows 10.

For example, "Command Prompt" uses legacy code page by default.
But WSL changes the code page to 65001, and  ``python.exe`` on Windows
can be executed from WSL.  So ``python.exe`` executed from legacy
console and from WSL cannot read text files written by each other.

Many Windows users don't understand code pages and which code page is
currently used.  So changing default text file encoding based on current
code page may cause confusion.

Consistent default text encoding will make Python behavior more expectable
and easy to learn.


Use UTF-8 by default is easier to new programmers
-------------------------------------------------

Python is one of the most popular first programming language.

New programmers may not know about encoding.  When they download text data
written in UTF-8 from the internet, they are forced to know encoding.

Popular text editers like VS Code or Atom use UTF-8 by default.
Even notepad.exe uses UTF-8 by default from Windows 10 2019 may update.
(Note that Python 3.9 will be released in 2021.)

It would be nice if new programmers are not forced to know about encoding
until they need to handle text files encoded in encoding other than UTF-8.


Specification
=============

From Python 3.9, default encoding of ``TextIOWrapper`` and ``open()`` is
changed from ``locale.getpreferredencoding(False)`` to "UTF-8".

When there is device encoding (``os.device_encoding(buffer.fileno())``),
itstill precedes than this default encoding.


Not affected areas
------------------

Unlike UTF-8 mode, ``locale.getpreferredencoding(False)`` returns
locale encoding.  Locale encoding is still respected when it makes sense.

``stdin``, ``stdout``, and ``stderr`` keep respecting locale too.  For example,
these commands don't cause mojibake regardless code page::

   > python -c "print('こんにちは')" | more
   こんにちは
   > python -c "print('こんにちは')" > temp.txt
   > type temp.txt
   こんにちは

Pipes and TTY should use locale encoding:

* ``subprocess`` and ``os.popen`` use locale encoding because subprocess
  will use locale encoding.
* ``getpass.getpass`` use locale encoding when using TTY.

Of course, this PEP is about file content, not file path.  So filenames
or file paths are not affected.


Affected APIs
--------------

All code using default encoding of ``TextIOWrapper`` or ``open`` are
affected.  This is incomplete list of APIs affected by this PEP:

* ``lzma.open``, ``gzip.open``, ``bz2.open``, ``ZipFile.read_text``.
* ``socket.makefile``
* ``tempfile.TemporaryFile``, ``tempfile.NamedTemporaryFile``
* ``trace.CoverageResults.write_results_file``


Warning
-------

From 3.8, ``DeprecationWarning`` is shown when encoding is omitted and
``locale.getpreferredencoding(False)`` is not UTF-8.  This helps not only
writing forward compatible code, but also investigating unexpected
``UnicodeDecodeError`` caused by the default encoding.  (See Motivation section
above.)


Backward compatibility
======================

There may be scripts relying locale or code page which is not UTF-8.

They must be rewritten to use ``encoding=locale.getpreferredencoding(False)``,
or ``encoding="mbcs"`` on Windows when porting them to Python 3.9.


Alternative ideas
=================

Enable UTF-8 mode by default
----------------------------

This idea is not mutually exclusive to this PEP.

If we enable UTF-8 mode by default, even people using Windows forget
it is not always UTF-8.  More scripts will be written assuming the
default encoding is UTF-8.

So changing default encoding of text files to always UTF-8 would be
better even if UTF-8 mode is enabled by default at some point.


Warn always encoding is ommitted
--------------------------------

Ommiting default encoding is common mistake when writing portable code.

But when portability is not matter, assuming UTF-8 is not so bad because
Python already implemented locale coercion (:pep:`538`) and UTF-8 mode
(:pep:`540`).

And these scripts will become portable when default encoding is changed
to always UTF-8.


Copyright
=========

This document has been placed in the public domain.

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:

