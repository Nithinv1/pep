PEP: 634
Title: Structural Pattern Matching: Specification
Version: $Revision$
Last-Modified: $Date$
Author: Brandt Bucher <brandtbucher@gmail.com>,
        Guido van Rossum <guido@python.org>
BDFL-Delegate:
Discussions-To: Python-Dev <python-dev@python.org>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 12-Sep-2020
Python-Version: 3.10
Post-History:
Replaces: 622
Resolution:


Abstract
========

This PEP provides the technical specification for the ``match``
statement.  It replaces PEP 622, which is split in three parts:

- PEP 634: Specification
- PEP 635: Motivation and Rationale
- PEP 636: Tutorial


Specification
=============

TBD.


.. _Appendix A:

Appendix A -- Full Grammar
==========================

Here is the full grammar for ``match_stmt``.  This is an additional
alternative for ``compound_stmt``.  It should be understood that
``match`` and ``case`` are soft keywords, i.e. they are not reserved
words in other grammatical contexts (including at the start of a line
if there is no colon where expected).  By convention, hard keywords
use single quotes while soft keywords use double quotes.

Other notation used beyond standard EBNF:

- ``SEP.RULE+`` is shorthand for ``RULE (SEP RULE)*``
- ``!RULE`` is a negative lookahead assertion

::

  match_expr:
      | star_named_expression ',' star_named_expressions?
      | named_expression
  match_stmt: "match" match_expr ':' NEWLINE INDENT case_block+ DEDENT
  case_block: "case" patterns [guard] ':' block
  guard: 'if' named_expression
  patterns: value_pattern ',' [values_pattern] | pattern
  pattern: walrus_pattern | or_pattern
  walrus_pattern: NAME ':=' or_pattern
  or_pattern: '|'.closed_pattern+
  closed_pattern:
      | capture_pattern
      | literal_pattern
      | constant_pattern
      | group_pattern
      | sequence_pattern
      | mapping_pattern
      | class_pattern
  capture_pattern: NAME !('.' | '(' | '=')
  literal_pattern:
      | signed_number !('+' | '-')
      | signed_number '+' NUMBER
      | signed_number '-' NUMBER
      | strings
      | 'None'
      | 'True'
      | 'False'
  constant_pattern: attr !('.' | '(' | '=')
  group_pattern: '(' patterns ')'
  sequence_pattern: '[' [values_pattern] ']' | '(' ')'
  mapping_pattern: '{' items_pattern? '}'
  class_pattern:
      | name_or_attr '(' ')'
      | name_or_attr '(' ','.pattern+ ','? ')'
      | name_or_attr '(' ','.keyword_pattern+ ','? ')'
      | name_or_attr '(' ','.pattern+ ',' ','.keyword_pattern+ ','? ')'
  signed_number: NUMBER | '-' NUMBER
  attr: name_or_attr '.' NAME
  name_or_attr: attr | NAME
  values_pattern: ','.value_pattern+ ','?
  items_pattern: ','.key_value_pattern+ ','?
  keyword_pattern: NAME '=' or_pattern
  value_pattern: '*' capture_pattern | pattern
  key_value_pattern:
      | (literal_pattern | constant_pattern) ':' or_pattern
      | '**' capture_pattern


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
