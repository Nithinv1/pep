PEP: 8014
Title: The Commons Governance Model
Author: Jack Jansen
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 2018-09-16


.. note:: This is just a placeholder until the actual governance PEPs are
          written.  It is possible that the title, content, model proposed,
          and authorship will change once the PEP is actually written.


Abstract
========

This PEP proposes a governnance model with as few procedures, defined terms and
percentages as possible. It may also be called *The Anarchist Governance Model*
but uses *Commons* for now because of possible negative connotations of the
term *Anarchist* to some audiences.

The rationale for the model is that everything that is cast in concrete will
have unintended negative side effects. For example, a governance model that
assigns voting rights to, say, Python committers may cause individuals not
to be accepted as a committer because there are already a lot of committers
from the company the new candidate works for. As another example, setting
a fixed percentage for PEP acceptance may lead to party-formation amongst
the voters and individual PEPs no longer be being judged on individual merit
but along party lines (if you support my PEP I will support yours). 

Introduction
============

The Commons Governance Model tries to ensure that all decisions are endorsed by,
or at least acceptable to, a sufficient majority of the Python community.

Unfortunately the previous paragraph has two terms that are very hard to
quantify in the general case: *sufficient majority* and *Python community*.
This is because both terms in reality depend on the *specific* case that is
being decided. To give an example of this difficulty: for a PEP that proposes
a backward-compatible change to some API a simple majority of the core
developers that were interested in voting on the PEP in the first place is
probably sufficient. But for a change that has more farreaching consequences
such as a Python3 to Python4 transition a real majority may be wanted, and
a demonstration that at least there seems to be sufficient support in the user
base. And for a change that transcends the Python-the-language, such as decisions
on abolishing non-inclusive language, it becomes very vague.

The Commons Governance Model attempts to sidestep this issue by *not* defining
what the terms *sufficient majority* and *Python community* mean in the
general case, by proposing a body that will decide so in *specific* cases.

The model proposes creating a *Council of Elders* that oversees the decision
process, determining whether a specific proposal has enough support on a
case by case basis. There will be a vote on every individual PEP (or PEP-like
decision), and the Council of Elders will declare whether the outcome of
the vote is sufficient to carry the decision.

The Commons Governance Model shares some principles with some of the other
proposed models, and I can imagine it being merged with those.

Council of Elders
=================

The intention of the Councel of Elders is that they, together, are capable
of judging whether the will of the Python community is upheld in a specific
vote. The Council of Elders is *not* a replacement of the BDFL by a group
of people with the same power as the BDFL (although it may well be that in the
past Guido as BDFL followed a somewhat similar decision process, at least in
some cases). The Council of Elders is *not* like the US Supreme Court, which
has actual decision power, it only oversees the voting process to ensure that
the community is represented in the vote. And the Council of Elders is most
definitely not like the Spanish Inquisition, because fear, surprise and ruthless
efficiency are things we can do without.

Why no new BDFL?
================

(this section may go)

- explain about old model appearing to be 2-step process (PEP writing, BDFL
verdict) but was really a 3-step process (PEP writing, enough discussion,
BDFL verdict)
- worked because of Guido's personality:
	- language elegance vs. usability
	- language progress vs. stability
	- open eye for community and members
- all those skills are available in the community, but asking for it in one
person is a bit much. And the load is too big.
	
	

Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
